tmp(0) := LDI & '0' & x"00";	-- LDI $0				#Carrega o acumulador com o valor 0
tmp(1) := STA & '0' & x"00";	-- STA @0				#Armazena o valor do acumulador em MEM[0] (constante 0)
tmp(2) := STA & '0' & x"02";	-- STA @2				#Armazena o valor do acumulador em MEM[2] (contador)
tmp(3) := LDI & '0' & x"01";	-- LDI $1				#Carrega o acumulador com o valor 1
tmp(4) := STA & '0' & x"01";	-- STA @1				#Armazena o valor do acumulador em MEM[1] (constante 1)
tmp(5) := NOP & '0' & x"00";	-- NOP
tmp(6) := LDA & '1' & x"60";	-- LDA @352			#Carrega o acumulador com a leitura do botão KEY0
tmp(7) := STA & '1' & x"20";	-- STA @288			#Armazena o valor lido em HEX0 (para verificar erros de leitura)
tmp(8) := CEQ & '0' & x"00";	-- CEQ @0				#Compara com o valor de MEM[0] (constante 0)
tmp(9) := JEQ & '0' & x"0B";	-- JEQ @11				#Desvia se igual a 0 (botão não foi pressionado)
tmp(10) := JSR & '0' & x"20";	-- JSR @32				#O botão foi pressionado, chama a sub-rotina de incremento
tmp(11) := NOP & '0' & x"00";	-- NOP			    	#Retorno da sub-rotina de incremento
tmp(12) := JMP & '0' & x"05";	-- JMP @5				#Fecha o laço principal, faz uma nova leitura de KEY0
tmp(13) := STA & '1' & x"FF";	-- STA @511			#Limpa a leitura do botão
tmp(14) := LDA & '0' & x"02";	-- LDA @2				#Carrega o valor de MEM[2] (contador)
tmp(15) := SOMA & '0' & x"01";	-- SOMA @1				#Soma com a constante em MEM[1]
tmp(16) := STA & '0' & x"02";	-- STA @2				#Salva o incremento em MEM[2] (contador)
tmp(17) := STA & '1' & x"02";	-- STA @258			#Armazena o valor do bit0 do acumulador no LDR9
tmp(18) := RET & '0' & x"00";	-- RET			    	#Retorna da sub-rotina
